#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int make_toks(char *s, char *tok[])
{
int i = 0;
char *p;
p = strtok(s, " ");
while(p != NULL)
{
tok[i++] = p;
p = strtok(NULL, " ");
}
tok[i] = NULL;
return i;
}
void typeline(char *op, char *fn)
{
int fh,i,j,n;
char c;
fh = open(fn, O_RDONLY);
if(fh == -1) {
printf("File %s not found.\n", fn);
return;
}
if(strcmp(op, "a") == 0)
{
while(read(fh, &c, 1) > 0)
printf("%c", c);
close(fh);
return;
}
n = atoi(op);
if(n > 0)
{
i = 0;
while(read(fh, &c, 1) > 0)
{
printf("%c", c);
if(c == '\n') i++;
if(i == n) break;
}
}
if(n < 0)
{
i = 0;
while(read(fh, &c, 1) > 0)
{
if(c == '\n') i++;
}
lseek(fh, 0, SEEK_SET);
j = 0;
while(read(fh, &c, 1) > 0)
{
if(c == '\n') j++;
if(j == i+n+1) break;//
}
while(read(fh, &c, 1) > 0)
{
printf("%c", c);
}
}
close(fh);
}
int main()
{
char buff[80],
*args[10];
int pid;
while(1)
{
printf("\nnewshell$ ");
fflush(stdin);
fgets(buff, 80, stdin);
buff[strlen(buff)-1] = '\0';
make_toks(buff, args);
if(strcmp(args[0], "typeline") == 0)
typeline (args [2], args[1]);
else
{
pid=fork();
if(pid>0)
wait();
else
{
if (execvp(args[0],args)==-1)
printf("bad command");
}
}
}
return 0;
}
*************************************************************************************
OUTPUT:
newshell$ typeline que.c +10
#include<stdio.h>
#define max 3
struct queue
{
int a[max];
int rear,front;
}*q;
void init(struct queue *q)
{
q->front=q->rear=-1;
newshell$ typeline que.c -20
case 3:if(isempty(q))
{
printf("\n empty queue.....");
}
else
{
del(q);
}
break;
case 4:disp(q);
break;
default:printf("wrong choice.....");
break;
}
}while(ch<=4);
}
newshell$ typeline que.c a
#include<stdio.h>
#define max 3
struct queue
{
int a[max];
int rear,front;
}*q;
void init(struct queue *q)
{
q->front=q->rear=-1;
}
void insert(struct queue *q,int val)
{
q->rear++;
q->a[q->rear]=val;
printf("\n insert zala...");
}
void del(struct queue *q)
{
int val;
val=q->a[q->front];
q->front--;
printf("\n deleted=%d",val);
}
void disp(struct queue *q)
{
int i;
for(i=q->front+1;i<=q->rear;i++)
{
printf("\t%d",q->a[i]);
}
}
int isempty(struct queue *q)
{
if(q->rear==q->front)
{
return 1;
}
else
{
return 0;
}
}
int isfull(struct queue *q)
{
if(q->rear==max-1)
{
return 1;
}
else
{
return 0;
}
}
void main()
{
int ch,val;
do
{
printf("\n1.init \n2.insert \n3.del \n4.disp \nenter the choice:");
scanf("%d",&ch);
switch(ch)
{
case 1:init(q);
break;
case 2:if(isfull(q))
{
printf("\n full ahe insert karu naka.....");
scanf("%d",&val);
insert(q,val);
}
break;
case 3:if(isempty(q))
{
printf("\n empty queue.....");
}
else
{
del(q);
}
break;
case 4:disp(q);
break;
default:printf("wrong choice.....");
break;
}
}while(ch<=4);
}
